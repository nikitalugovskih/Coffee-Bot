import logging
import random
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat
from telegram.ext import Application, ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode
import json
import os
import asyncio
import re
import nest_asyncio
import datetime
import pytz
import updater
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning
from telegram.error import BadRequest

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio
nest_asyncio.apply()

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_IDS = [647850100, 918094104] # 918094104
cycle_users = []
user_data = {}
feedback_data = {}
not_cycle_users = {}

# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è ConversationHandler
ASKING_EMAIL, ASKING_NAME, ASKING_POSITION, CONFIRMING_NAME, CONFIRMING_POSITION, SHOWING_CARD, LEAVING_FEEDBACK = range(7)

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data(filename, default):
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                data = json.load(file)
                logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}: {data}")
                return data
        return default
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {filename}: {e}")
        return default

def save_data(data, filename):
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}: {data}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ {filename}: {e}")

user_data = load_data('user_data.json', {})
cycle_users = load_data('cycle_users.json', {})
feedback_data = load_data('feedback_data.json', {})
not_cycle_users = load_data('not_cycle_users.json', {})
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã cycle users: {cycle_users}")
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã user data: {user_data}")

def handle_cycle_start(update: Update, context):
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ UUID –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_data
    for uuid_key, user_info in user_data.items():
        if user_info.get('id') == user_id:
            context.user_data['uuid'] = uuid_key
            return context.user_data['uuid']

    # –ï—Å–ª–∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    user_uuid = str(uuid.uuid4())
    context.user_data['uuid'] = user_uuid
    user_data[user_uuid] = {
        'id': user_id,
        'email': '',
        'name': '',
        'position': ''
    }
    save_data(user_data, 'user_data.json')
    return user_uuid

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ start –¥–ª—è –≤—ã–∑–æ–≤–∞ handle_cycle_start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    user_id = update.message.from_user.id
    context.user_data['id'] = user_id

    for uuid_key, user_info in user_data.items():
        if user_info.get('id') == user_id:
            context.user_data['uuid'] = uuid_key
            context.user_data['email'] = user_info.get('email', '')
            context.user_data['name'] = user_info.get('name', '')
            context.user_data['position'] = user_info.get('position', '')
            await update.message.reply_text(
                f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {context.user_data['name']}\n–ü–æ—á—Ç–∞: {context.user_data['email']}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {context.user_data['position']}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='new_cycle')],
                    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª", callback_data='join_cycle')]
                ])
            )
            return SHOWING_CARD
    return await start_registration(update, context)


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id

    for uuid_key, user_info in user_data.items():
        if user_info.get('id') == user_id:
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return ConversationHandler.END

    if user_id in ADMIN_IDS:
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("show_all_users", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏"),
            BotCommand("match", "–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É"),
            BotCommand("clear_database", "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
            BotCommand("leave_feedback", "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫")
        ]
    else:
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("leave_feedback", "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫")
        ]

    await context.bot.set_my_commands(commands, scope=BotCommandScopeChat(user_id))

    keyboard = [[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏ üöÄ", callback_data='start_registration')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    image_url = 'https://i.ibb.co/rfMcqY5/img.png'
    
    try:
        await context.bot.send_photo(
            chat_id=update.message.chat.id if update.message else update.callback_query.message.chat.id,
            photo=image_url,
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç –±–æ—Ç random-coffee, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º?",
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    return ASKING_EMAIL

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {query.data}")

    if query.data == 'start_registration':
        context.user_data.clear()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ—Å—Ç–æ—è–Ω–∏–µ ASKING_EMAIL")
        await query.message.reply_text(
            text="–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ—é –ø–æ—á—Ç—É? –ù–∞–ø–∏—à–∏ –µ—ë –Ω–∏–∂–µ üòâ"
        )
        return ASKING_EMAIL
    elif query.data == 'use_existing':
        user_info = context.user_data
        if user_info:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await query.message.reply_text(
                f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–ü–æ—á—Ç–∞: {user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='new_cycle')],
                    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª", callback_data='join_cycle')]
                ])
            )
        else:
            logger.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return SHOWING_CARD
    elif query.data == 'new_cycle':
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è")
        context.user_data['name'] = ""
        context.user_data['position'] = ""
        await query.message.reply_text(
            text="–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return ASKING_NAME
    elif query.data == 'join_cycle':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ")
        await query.message.reply_text("–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ!")
        return ConversationHandler.END

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['name'] = update.message.text
        logger.info(f"User name: {context.user_data['name']}")

        if 'email' in context.user_data:
            await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å üßë‚Äçüè≠")
            return ASKING_POSITION
        else:
            await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É üì´")
            return ASKING_EMAIL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_name: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text

    if not is_valid_email(email):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ email@domen.domen")
        return ASKING_EMAIL

    user_id = context.user_data.get('id')
    if not user_id:
        user_id = update.message.from_user.id
        context.user_data['id'] = user_id

    for uuid_key, info in user_data.items():
        if info.get('id') == user_id:
            context.user_data['email'] = email
            context.user_data['uuid'] = uuid_key
            user_data[uuid_key]['email'] = email
            save_data(user_data, 'user_data.json')
            await update.message.reply_text(
                f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–ü–æ—á—Ç–∞: {email}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {info.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='new_cycle')],
                    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª", callback_data='join_cycle')]
                ])
            )
            return SHOWING_CARD

    new_user_uuid = str(uuid.uuid4())
    context.user_data['email'] = email
    context.user_data['uuid'] = new_user_uuid
    user_data[new_user_uuid] = {
        'id': user_id,
        'email': email,
        'name': '',
        'position': ''
    }
    save_data(user_data, 'user_data.json')
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üòâ")
    return ASKING_NAME


def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email) is not None

async def confirm_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'change_name':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üòâ")
        return ASKING_NAME
    else:
        await query.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏ —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –±—ã–ª–∞ - {context.user_data['position']}. –ò–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data='change_position')],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data='keep_position')]
            ])
        )
        return CONFIRMING_POSITION

async def confirm_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'change_position':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å üßë‚Äçüè≠")
        return ASKING_POSITION
    else:
        user_id = context.user_data['uuid']
        user_data[user_id] = {
            'id': context.user_data['id'],
            'name': context.user_data['name'],
            'email': context.user_data['email'],
            'position': context.user_data['position']
        }
        save_data(user_data, 'user_data.json')
        keyboard = [
            [InlineKeyboardButton("–Ø —É—á–∞—Å—Ç–≤—É—é –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ üëç", callback_data='join_cycle')],
            [InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å üëé", callback_data='not_join_cycle')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"–°—É–ø–µ—Ä! –¢–≤–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç :)\n\n"
            f"–ò–º—è: {context.user_data['name']} üå∏\n"
            f"–ü–æ—á—Ç–∞: {context.user_data['email']} üì´\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {context.user_data['position']} üëÄ",
            reply_markup=reply_markup
        )
        return SHOWING_CARD

async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'name' not in context.user_data or 'email' not in context.user_data:
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —è –µ—â–µ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–µ –∏–º—è –∏–ª–∏ –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –ø–æ—á—Ç—É.")
        return ASKING_NAME
    context.user_data['position'] = update.message.text

    user_id = context.user_data['uuid']
    user_data[user_id] = {
        'id': context.user_data['id'],
        'name': context.user_data['name'],
        'email': context.user_data['email'],
        'position': context.user_data['position']
    }
    save_data(user_data, 'user_data.json')
    logger.info(f"User position: {context.user_data['position']}")
    keyboard = [
        [InlineKeyboardButton("–Ø —É—á–∞—Å—Ç–≤—É—é –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ üëç", callback_data='join_cycle')],
        [InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å üëé", callback_data='not_join_cycle')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–°—É–ø–µ—Ä! –¢–≤–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç :)\n\n"
        f"–ò–º—è: {context.user_data['name']} üå∏\n"
        f"–ü–æ—á—Ç–∞: {context.user_data['email']} üì´\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {context.user_data['position']} üëÄ",
        reply_markup=reply_markup
    )
    return SHOWING_CARD

async def cycle_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_uuid = context.user_data['uuid']
    chat_id = update.effective_chat.id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ cycle_users.json
    cycle_users = load_data('cycle_users.json', {})

    if query.data == 'join_cycle':
        if user_uuid not in cycle_users:
            cycle_users[user_uuid] = chat_id
            save_data(cycle_users, 'cycle_users.json')
        if user_uuid in not_cycle_users:
            del not_cycle_users[user_uuid]
            save_data(not_cycle_users, 'not_cycle_users.json')
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_uuid} –≤ —Ü–∏–∫–ª: {list(cycle_users.keys())}")
        num_users_text = get_user_count_text(len(cycle_users))
        await query.message.reply_text(
            text=f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ —É—á–∞—Å—Ç–≤—É–µ—Ç {num_users_text}. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã :) –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        await notify_cycle_user_count(context)
    elif query.data == 'not_join_cycle':
        if user_uuid not in not_cycle_users:
            not_cycle_users[user_uuid] = chat_id
            save_data(not_cycle_users, 'not_cycle_users.json')
        if user_uuid in cycle_users:
            del cycle_users[user_uuid]
            save_data(cycle_users, 'cycle_users.json')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_uuid} –Ω–µ –≤ —Ü–∏–∫–ª–µ: {list(not_cycle_users.keys())}")
        keyboard = [[InlineKeyboardButton("–ù—É –ª–∞–¥–Ω–æ, —è –ø–µ—Ä–µ–¥—É–º–∞–ª - —É—á–∞—Å—Ç–≤—É—é!", callback_data='join_cycle')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            text="–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —è –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª :)",
            reply_markup=reply_markup
        )
        await notify_cycle_user_count(context)
    return SHOWING_CARD


async def notify_cycle_users_command(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    if update:
        if update.message.from_user.id not in ADMIN_IDS:
            await update.message.reply_text("OOPS! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        await notify_cycle_user_count(context)
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    else:
        await notify_cycle_user_count(context)

async def show_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("OOPS! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    data = load_data('user_data.json', {})
    if not data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    message = "–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, info in data.items():
        logger.info(f"user_id: {user_id}, info: {info}, type(info): {type(info)}")
        
        if isinstance(info, dict):
            name = info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            email = info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            position = info.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            message += f"–ò–º—è: {name}\n–ü–æ—á—Ç–∞: {email}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n\n"
        else:
            logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –ø–æ–ª—É—á–µ–Ω {type(info)} –¥–ª—è user_id {user_id}")

    await update.message.reply_text(message)

async def match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("OOPS! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await match_logic(user_data, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"context.user_data –≤ button_handler: {context.user_data}")

    if query.data == 'yes_meet':
        meet_link = "https://calendar.google.com/calendar/u/0/r/eventedit?vcon=meet&dates=now&hl=ru"
        await query.message.reply_text(
            text=f"–ê –≤–æ—Ç –∏ —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ - üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É]({meet_link})\n\n –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–π–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!\n\n –ù–µ –∑–∞–±—É–¥—å –ø–æ—Ç–æ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ :)",
            parse_mode='Markdown'
        )
    elif query.data == 'no_meet':
        keyboard = [[InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –≤—Å—Ç—Ä–µ—á—É!", callback_data='yes_meet')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            text="–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—Ç—Ä–µ—á—É :)",
            reply_markup=reply_markup
        )

async def scheduled_match(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    await match_logic(job_data['user_data'], context)

async def match_logic(user_data_dict, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–§—É–Ω–∫—Ü–∏—è match –≤—ã–∑–≤–∞–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ cycle_users.json
    cycle_users_data = load_data('cycle_users.json', {})

    if len(cycle_users_data) < 2:
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(chat_id=admin_id, text="OOPS! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã.")
        return

    cycle_users_in_data = [user_uuid for user_uuid in cycle_users_data if user_uuid in user_data_dict]
    missing_users = [user_uuid for user_uuid in cycle_users_data if user_uuid not in user_data_dict]

    if missing_users:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {missing_users}")

    if len(cycle_users_in_data) < 2:
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(chat_id=admin_id, text="OOPS! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É.")
        return

    random.shuffle(cycle_users_in_data)
    pairs = []
    used_users = set()

    while len(cycle_users_in_data) >= 2:
        user1_uuid = cycle_users_in_data.pop()
        user2_uuid = cycle_users_in_data.pop()
        
        if user1_uuid in used_users or user2_uuid in used_users:
            continue

        pairs.append((user1_uuid, user2_uuid))
        used_users.update([user1_uuid, user2_uuid])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
    remaining_users = [user_uuid for user_uuid in cycle_users_in_data if user_uuid not in used_users]
    
    if pairs:
        for user1_uuid, user2_uuid in pairs:
            user1 = user_data_dict.get(user1_uuid, {})
            user2 = user_data_dict.get(user2_uuid, {})

            if not user1 or not user2:
                logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {user1_uuid}, {user2_uuid}")
                continue

            user1_chat_id = cycle_users_data.get(user1_uuid)
            user2_chat_id = cycle_users_data.get(user2_uuid)

            if not user1_chat_id or not user2_chat_id:
                logger.error(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user1_uuid}, {user2_uuid}")
                continue

            keyboard = [
                [InlineKeyboardButton("–î–∞, –¥–∞–≤–∞–π :)", callback_data='yes_meet')],
                [InlineKeyboardButton("–ù–µ—Ç, –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ!", callback_data='no_meet')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user1_uuid} ({user1_chat_id}) –∏ {user2_uuid} ({user2_chat_id})")
            try:
                await context.bot.send_message(
                    chat_id=user1_chat_id,
                    text=f"–í–ñ–£–•–•! –ò —è —Å–æ–∑–¥–∞–ª –ø–∞—Ä—É! –≠—Ç–æ {user1.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} –∏ {user2.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} üòä!\n\n"
                         f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É, –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ üíª –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ ‚òïÔ∏è\n\n"
                         f"–ê –º–æ–∂–µ–º –≤–æ–æ–±—â–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ Google Meet, —á—Ç–æ —Å–∫–∞–∂–µ—à—å? üßê",
                    reply_markup=reply_markup
                )
            except BadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user1_uuid} ({user1_chat_id}): {e}")

            try:
                await context.bot.send_message(
                    chat_id=user2_chat_id,
                    text=f"–í–ñ–£–•–•! –ò —è —Å–æ–∑–¥–∞–ª –ø–∞—Ä—É! –≠—Ç–æ {user1.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} –∏ {user2.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} üòä!\n\n"
                         f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É, –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ üíª –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ ‚òïÔ∏è\n\n"
                         f"–ê –º–æ–∂–µ–º –≤–æ–æ–±—â–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ Google Meet, —á—Ç–æ —Å–∫–∞–∂–µ—à—å? üßê",
                    reply_markup=reply_markup
                )
            except BadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user2_uuid} ({user2_chat_id}): {e}")

    if remaining_users:
        for user_uuid in remaining_users:
            user = user_data_dict.get(user_uuid, {})
            user_chat_id = cycle_users_data.get(user_uuid)
            if not user_chat_id:
                logger.error(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_uuid}")
                continue

            try:
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏. –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª."
                )
            except BadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_uuid} ({user_chat_id}): {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ cycle_users.json
    for user_uuid in remaining_users:
        cycle_users_data[user_uuid] = user_data_dict[user_uuid]['id']
    save_data(cycle_users_data, 'cycle_users.json')

    logger.info("–§—É–Ω–∫—Ü–∏—è match –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ cycle_users
    cycle_users_data = {k: v for k, v in cycle_users_data.items() if k not in used_users}
    save_data(cycle_users_data, 'cycle_users.json')

async def leave_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤.")
    
    keyboard = [
        [InlineKeyboardButton("üíö - –Ω–µ–ø–ª–æ—Ö–æ", callback_data='feedback_1')],
        [InlineKeyboardButton("üíöüíö - —Ö–æ—Ä–æ—à–æ", callback_data='feedback_2')],
        [InlineKeyboardButton("üíöüíöüíö - –±—ã–ª–æ –∫—Ä—É—Ç–æ", callback_data='feedback_3')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text="–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞?",
        reply_markup=reply_markup
    )

async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    feedback_responses = {
        'feedback_1': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û—á–µ–Ω—å –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –ª—É—á—à–µ :)',
        'feedback_2': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ :)',
        'feedback_3': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥ —Å–ª—ã—à–∞—Ç—å, –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ :)'
    }
    
    feedback_text = feedback_responses.get(query.data)
    
    user_id = context.user_data.get('id', str(uuid.uuid4()))
    feedback_data[user_id] = query.data
    save_data(feedback_data, 'feedback_data.json')
    
    await query.message.reply_text(feedback_text)

async def clear_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("OOPS! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    global user_data
    user_data = {}
    save_data(user_data, 'user_data.json')
    await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

async def notify_admins(context, message: str):
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def notify_cycle_user_count(context: ContextTypes.DEFAULT_TYPE):
    cycle_users = load_data('cycle_users.json', {})
    num_users = len(cycle_users)
    message = f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ {num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await notify_admins(context, message)


async def check_cycle_users(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–∏–∫–ª–∞")
    if len(cycle_users) == 0:
        await notify_admins(context, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ.")
    else:
        await notify_admins(context, f"–í —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ {len(cycle_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–∏–∫–ª–∞")

def get_user_count_text(count):
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return f"{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    else:
        return f"{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    try:
        if update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        elif update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

async def set_commands(application):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("leave_feedback", "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫")
    ]
    await application.bot.set_my_commands(commands)

USER_DATA_FILE = "user_data.json"

async def send_message_to_chat(context: CallbackContext):
    job = context.job
    chat_id = job.data
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_id}")
    try:
        await context.bot.send_message(chat_id=chat_id, text="–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def notify_admins_task(context: CallbackContext):
    await notify_cycle_users_command(None, context)

async def run_match_task(context: CallbackContext):
    await match_logic(user_data, context)

async def main():
    global user_data, cycle_users, feedback_data, not_cycle_users

    application = ApplicationBuilder().token("7197628643:AAHqgdZSURQGrkAB6E22MP-cSjgKiFe0xrM").build()
    job_queue = application.job_queue

    user_data = load_data('user_data.json', {})
    cycle_users = load_data('cycle_users.json', {})
    feedback_data = load_data('feedback_data.json', {})
    not_cycle_users = load_data('not_cycle_users.json', {})
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã cycle users: {cycle_users}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã user data: {user_data}")

    minsk_tz = pytz.timezone('Europe/Minsk')

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ 9:50
    job_queue.run_daily(notify_admins_task, time=datetime.time(15, 13, 0, tzinfo=minsk_tz), name="notify_admins")

    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ /match –≤ 10:00
    job_queue.run_daily(run_match_task, time=datetime.time(20, 48, 0, tzinfo=minsk_tz), name="run_match")

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASKING_EMAIL: [
                CallbackQueryHandler(button, pattern='^start_registration$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)
            ],
            ASKING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASKING_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
            CONFIRMING_NAME: [CallbackQueryHandler(confirm_name, pattern='^change_name$|^keep_name$')],
            CONFIRMING_POSITION: [CallbackQueryHandler(confirm_position, pattern='^change_position$|^keep_position$')],
            SHOWING_CARD: [
                CallbackQueryHandler(cycle_handler, pattern='^join_cycle$|^not_join_cycle$'),
                CallbackQueryHandler(button, pattern='^use_existing$|^new_cycle$|^start_registration$')
            ]
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('show_all_users', show_all_users))
    application.add_handler(CommandHandler('match', match))
    application.add_handler(CommandHandler('clear_database', clear_database))
    application.add_handler(CommandHandler('leave_feedback', leave_feedback))
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^yes_meet$|^no_meet$'))
    application.add_handler(CallbackQueryHandler(feedback_handler, pattern='^feedback_1$|^feedback_2$|^feedback_3$'))
    application.add_error_handler(error_handler)

    await application.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())